import 'package:flutter/material.dart';
import 'package:sqfentity/db/sqfEntityBase.dart';

/*
These classes was generated by SqfEntity
To use these SqfEntity classes do following: 
- import Product.dart into where to use
- start typing Product().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
- and then just put end of filters / or end of only select()  toSingle(product) / or toList(productList) 
- you can select one Product or List<Product> by your filters and orders
- also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
  Enjoy.. Huseyin Tokpunar
*/
// region Product
class Product extends SearchCriteria {
  // FIELDS
  int id;
  String name;
  String description;
  double price;
  bool isActive;
  bool isDeleted;

  // end FIELDS
  static const bool softDeleteActivated=true;
  ProductManager __mnProduct;
  ProductFilterBuilder _select;

  ProductManager get _mnProduct {
    if (__mnProduct == null) __mnProduct = new ProductManager();
    return __mnProduct;
  }

  Product({this.id, this.name,this.description,this.price,this.isActive,this.isDeleted
}) { setDefaultValues();}
  Product.withFields(this.name,this.description,this.price,this.isActive,this.isDeleted
){ setDefaultValues();}
  Product.withId(this.id, this.name,this.description,this.price,this.isActive,this.isDeleted
){ setDefaultValues();}

  // methods
  Map<String, dynamic> toMap({bool forQuery=false}) {
    var map = Map<String, dynamic>();
    if (id != null) map["id"] = id;    if (name != null) map["name"] = name;
    if (description != null) map["description"] = description;
    if (price != null) map["price"] = price;
    if (isActive != null) map["isActive"] = forQuery? (isActive ? 1 : 0) : isActive;
  if (isDeleted != null) map["isDeleted"] = forQuery? (isDeleted ? 1 : 0):isDeleted;

    return map;
    }

    Product.fromMap(Map<String, dynamic> o) {
    this.id = o["id"];
    this.name = o["name"];
    this.description = o["description"];
    this.price = o["price"];
    this.isActive = o["isActive"] != null ? o["isActive"] == 1 : null;
  this.isDeleted = o["isDeleted"] != null ? o["isDeleted"] == 1 : null;
    }

    Product.fromObjectExclude(dynamic o) {
    this.id = o["id"];
    this.name = o["name"];
    this.description = o["description"];
    this.price = o["price"];
    this.isActive = o["isActive"] != null ? o["isActive"] == 1 : null;
  this.isDeleted = o["isDeleted"] != null ? o["isDeleted"] == 1 : null;
    }
  
  Future<List<Product>> fromObjectList(Future<List<dynamic>> o) async {
    var productsList = new List<Product>();
    o.then((data) {
      for (int i = 0; i < data.length; i++) {
        productsList.add(Product.fromMap(data[i]));
      }
    });
    return productsList;
  }

  List<Product> fromMapList(List<Map<String, dynamic>> query) {
    List<Product> products = List<Product>();
    for (Map map in query) {
      products.add(Product.fromMap(map));
    }
    return products;
  }

  /// returns Product by ID if exist, otherwise returns null
  /// <param name="id">Primary Key Value</param>
  /// <returns>returns Product if exist, otherwise returns null</returns>
  Product getById([int id, VoidCallback callBack(Product o)]) {
    Product product;
    var productFuture = _mnProduct.getById(id);
    productFuture.then((data) {
      if (data.length > 0)
        product = Product.fromMap(data[0]);
      else
        product = null;
      callBack(product);
    });
    return product;
  }

  /// <summary>
  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> save() async {
    if (id == null || id == 0)
      id = await _mnProduct.insert(
          Product.withFields(name,description,price,isActive,isDeleted
));
    else
      _mnProduct.update(
          Product.withId(id, name,description,price,isActive,isDeleted
));
    return id;
  }

  /// <summary>
  /// SaveAs Product. Returns a new Primary Key value of Product
  /// </summary>
  /// <returns>Returns a new Primary Key value of Product</returns>
  Future<int> get saveAs async {
    id = await _mnProduct.insert(
        Product.withFields(name,description,price,isActive,isDeleted
));
    return id;
  }

  /// <summary>
  /// Deletes Product
  /// </summary>
  /// <returns>true=Deleted, false=Can not deleted</returns>
  Future<BoolResult> delete() async {
    print("SQFENTITIY: delete Product called (id=$id)");
    if (!softDeleteActivated)
      return _mnProduct.delete(QueryParams(whereString: "id=$id"));
    else
      return _mnProduct
          .updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
  }
  //private ProductFilterBuilder _Select;
  ProductFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    _select = new ProductFilterBuilder(this);
    _select._getIsDeleted = getIsDeleted==true;
    _select.qparams.selectColumns = columnsToSelect;
    return _select;
  }

  ProductFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    ProductFilterBuilder _distinct = new ProductFilterBuilder(this);
    _distinct._getIsDeleted = getIsDeleted==true;
    _distinct.qparams.selectColumns = columnsToSelect;
    _distinct.qparams.distinct = true;
    return _distinct;
  }

  void setDefaultValues() {
    if(price==null) price=0;
if(isActive==null) isActive=false;
   if(isDeleted==null) isDeleted=false;
  }
  //end methods
}
// endregion product

    
// region ProductField
class ProductField extends SearchCriteria {
  DbParameter param;
  String _waitingNot = "";
  ProductFilterBuilder productFB;
  ProductField(ProductFilterBuilder fb) {
    param = new DbParameter();
    productFB = fb;
  }

  ProductField get not {
    _waitingNot = " NOT ";
    return this;
  }

  ProductFilterBuilder equals(var pValue) {
    param.expression = "=";
    productFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, productFB.parameters, param, SqlSyntax.EQuals,
            productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param, SqlSyntax.NotEQuals,
            productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder isNull() {
    productFB._addedBlocks = setCriteria(
        0,
        productFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder contains(dynamic pValue) {
    productFB._addedBlocks = setCriteria(
        "%" + pValue + "%",
        productFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder startsWith(dynamic pValue) {
    productFB._addedBlocks = setCriteria(
        pValue + "%",
        productFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder endsWith(dynamic pValue) {
    productFB._addedBlocks = setCriteria(
        "%" + pValue,
        productFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      productFB._addedBlocks = setCriteria(
          pFirst,
          productFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          productFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "")
        productFB._addedBlocks = setCriteria(pFirst, productFB.parameters,
            param, SqlSyntax.LessThan, productFB._addedBlocks);
      else
        productFB._addedBlocks = setCriteria(pFirst, productFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, productFB._addedBlocks);
    } else if (pLast != null) {
      if (_waitingNot != "")
        productFB._addedBlocks = setCriteria(pLast, productFB.parameters, param,
            SqlSyntax.GreaterThan, productFB._addedBlocks);
      else
        productFB._addedBlocks = setCriteria(pLast, productFB.parameters, param,
            SqlSyntax.LessThanOrEquals, productFB._addedBlocks);
    }
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    productFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.GreaterThan, productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.LessThanOrEquals, productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    productFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, productFB.parameters, param, SqlSyntax.LessThan,
            productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    productFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param, SqlSyntax.LessThan,
            productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    productFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.LessThanOrEquals, productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.GreaterThan, productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder inValues(var pValue) {
    productFB._addedBlocks = setCriteria(
        pValue,
        productFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }
}
// endregion ProductField

    // region ProductFilterBuilder
class ProductFilterBuilder extends SearchCriteria {
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Product _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;
  ProductFilterBuilder(Product obj) {
    whereString = "";
    qparams = new QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = new AddedBlocks(new List<bool>(), new List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }

  ProductFilterBuilder get and {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " AND ";
    return this;
  }

  ProductFilterBuilder get or {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " OR ";
    return this;
  }

  ProductFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  ProductFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != "") {
      DbParameter param = new DbParameter();
      _addedBlocks = setCriteria(
          0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  ProductFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  ProductFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  ProductFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += " ) ";
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  ProductFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add(argFields);
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s ");
        }
    }
    return this;
  }

  ProductFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add("$argFields desc ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s desc ");
        }
    }
    return this;
  }

  ProductFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.groupByList.add(" $argFields ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.groupByList.add(" $s ");
        }
    }
    return this;
  }

  ProductField setField(ProductField field, String colName, DbType dbtype) {
    field = new ProductField(this);
    field.param = new DbParameter(
        dbType: dbtype,
        columnName: colName,
        wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
    return field;
  }

      ProductField _id;
  ProductField get id {
    _id = setField(_id, "id", DbType.integer);
    return _id;
  }
          ProductField _name;
  ProductField get name {
    _name = setField(_name, "name", DbType.text);
    return _name;
  }
          ProductField _description;
  ProductField get description {
    _description = setField(_description, "description", DbType.text);
    return _description;
  }
          ProductField _price;
  ProductField get price {
    _price = setField(_price, "price", DbType.real);
    return _price;
  }
          ProductField _isActive;
  ProductField get isActive {
    _isActive = setField(_isActive, "isActive", DbType.bool);
    return _isActive;
  }
          ProductField _isDeleted;
  ProductField get isDeleted {
    _isDeleted = setField(_isDeleted, "isDeleted", DbType.bool);
    return _isDeleted;
  }
    

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams.limit = _pagesize;
      qparams.offset = (_page - 1) * _pagesize;
    } else {
      qparams.limit = _pagesize;
      qparams.offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll("[", "")
              .replaceAll("]", "")
              .toString();
          whereString += param.whereString
              .replaceAll("{field}", param.columnName)
              .replaceAll("?", param.value);
          param.value = null;
        } else
          whereString +=
              param.whereString.replaceAll("{field}", param.columnName);
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) param.value = param.value ? 1 : 0;
            break;
          default:
        }

        if (param.value != null) whereArguments.add(param.value);
        if (param.value2 != null) whereArguments.add(param.value2);
      } else
        whereString += param.whereString;
    }
    if (Product.softDeleteActivated) {
      if (whereString != "")
        whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") +
            " ($whereString)";
      else if (!_getIsDeleted) whereString = "ifnull(isDeleted,0)=0";
    }

    if (whereString != "") qparams.whereString = whereString;
    qparams.whereArguments = whereArguments;
    qparams.groupBy = groupByList.join(',');
    qparams.orderBy = orderByList.join(',');
  }


  Future<BoolResult> delete() {
    _buildParameters();
      if(Product.softDeleteActivated)
       return _obj._mnProduct.updateBatch(qparams,{"isDeleted":1});
    else
       return _obj._mnProduct.delete(qparams);
  }


  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnProduct.updateBatch(qparams, values);
  }

/// This method always returns ProductObj if exist, otherwise returns null 
  /// <returns>List<Product></returns>
  void toSingle(VoidCallback product(Product o)) {
    _pagesize = 1;
    toList((List<Product> list) {
      if(list.length>0)
      product(list[0]);
      else
      product(null);
    });
  }

  
  /// This method always returns List<Product>. 
  /// <returns>List<Product></returns>
  void toList(VoidCallback productList (List<Product> o)) async {

    _buildParameters();

    var productsFuture = _obj._mnProduct.toList(qparams);

    List<Product> productsData = new List<Product>();
    productsFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        productsData.add(Product.fromMap(data[i]));
      }
      productList (productsData);
      productsData = null;
    });

    
  }

  void toListObject(VoidCallback listObject(List<dynamic> o)) async {
    _buildParameters();

    var objectFuture = _obj._mnProduct.toList(qparams);

    List<dynamic> objectsData = new List<dynamic>();
    objectFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        objectsData.add(data[i]);
      }
      listObject(objectsData);
      objectsData = null;
    });

    
  }

}
// endregion ProductFilterBuilder
    
    


// region ProductFields
class ProductFields {
  static TableField _fId;
  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }
  static TableField _fName;
  static TableField get name {
    _fName = SqlSyntax.setField(_fName, "name", DbType.text);
    return _fName;
  }
  static TableField _fDescription;
  static TableField get description {
    _fDescription = SqlSyntax.setField(_fDescription, "description", DbType.text);
    return _fDescription;
  }
  static TableField _fPrice;
  static TableField get price {
    _fPrice = SqlSyntax.setField(_fPrice, "price", DbType.real);
    return _fPrice;
  }
  static TableField _fIsActive;
  static TableField get isActive {
    _fIsActive = SqlSyntax.setField(_fIsActive, "isActive", DbType.bool);
    return _fIsActive;
  }
  static TableField _fIsDeleted;
  static TableField get isDeleted {
    _fIsDeleted = SqlSyntax.setField(_fId, "isDeleted", DbType.integer);
    return _fIsDeleted;
  }
    
}
// endregion ProductFields

//region ProductManager
class ProductManager extends SqfEntityProvider {
  static String _tableName = "product";
  static String _colId = "id";

  ProductManager():super(tableName: _tableName, colId: _colId);
}
//endregion ProductManager
