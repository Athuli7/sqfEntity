import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';
import 'package:sqfentity/db/MyDbModel.dart';
import 'package:sqfentity/db/sqfEntityBase.dart';

/*
      These classes was generated by SqfEntity
      To use these SqfEntity classes do following: 
      - import Product.dart into where to use
      - start typing Product().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
      - and then just put end of filters / or end of only select()  toSingle(product) / or toList(productList) 
      - you can select one Product or List<Product> by your filters and orders
      - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
        Enjoy.. Huseyin Tokpunar
      */
// region Product
class Product extends SearchCriteria {
  // FIELDS
  int id;
  String name;
  String description;
  double price;
  bool isActive;
  int categoryId;
  int rownum;
  bool isDeleted;
  // end FIELDS

// RELATIONSHIPS
  getCategory(VoidCallback category(Category o)) {
    Category().getById(categoryId, (obj) {
      category(obj);
    });
  }
  // END RELATIONSHIPS

  static const bool _softDeleteActivated = true;
  ProductManager __mnProduct;
  ProductFilterBuilder _select;

  ProductManager get _mnProduct {
    if (__mnProduct == null) __mnProduct = new ProductManager();
    return __mnProduct;
  }

  Product(
      {this.id,
      this.name,
      this.description,
      this.price,
      this.isActive,
      this.categoryId,
      this.rownum,
      this.isDeleted}) {
    setDefaultValues();
  }
  Product.withFields(this.name, this.description, this.price, this.isActive,
      this.categoryId, this.rownum, this.isDeleted) {
    setDefaultValues();
  }
  Product.withId(this.id, this.name, this.description, this.price,
      this.isActive, this.categoryId, this.rownum, this.isDeleted) {
    setDefaultValues();
  }

  // methods
  Map<String, dynamic> toMap({bool forQuery = false}) {
    var map = Map<String, dynamic>();
    if (id != null) map["id"] = id;
    if (name != null) map["name"] = name;
    if (description != null) map["description"] = description;
    if (price != null) map["price"] = price;
    if (isActive != null)
      map["isActive"] = forQuery ? (isActive ? 1 : 0) : isActive;
    if (categoryId != null) map["categoryId"] = categoryId;
    if (rownum != null) map["rownum"] = rownum;
    if (isDeleted != null)
      map["isDeleted"] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;

    return map;
  }

  Product.fromMap(Map<String, dynamic> o) {
    this.id = o["id"];
    this.name = o["name"];
    this.description = o["description"];
    this.price = o["price"];
    this.isActive = o["isActive"] != null ? o["isActive"] == 1 : null;
    this.categoryId = o["categoryId"];
    this.rownum = o["rownum"];
    this.isDeleted = o["isDeleted"] != null ? o["isDeleted"] == 1 : null;
  }

  List<dynamic> toArgs() {
    return [
      id,
      name,
      description,
      price,
      isActive,
      categoryId,
      rownum,
      isDeleted
    ];
  }

  static fromWebUrl(
      String url, VoidCallback productList(List<Product> o)) async {
    var objList = List<Product>();
    http.get(url).then((response) {
      Iterable list = json.decode(response.body);
      try {
        objList = list.map((product) => Product.fromMap(product)).toList();
        productList(objList);
      } catch (e) {
        print("SQFENTITY ERROR Product.fromWeb: ErrorMessage:" + e.toString());
      }
    });
  }

  static Future<List<Product>> fromObjectList(Future<List<dynamic>> o) async {
    var productsList = new List<Product>();
    o.then((data) {
      for (int i = 0; i < data.length; i++) {
        productsList.add(Product.fromMap(data[i]));
      }
    });
    return productsList;
  }

  static List<Product> fromMapList(List<Map<String, dynamic>> query) {
    List<Product> products = List<Product>();
    for (Map map in query) {
      products.add(Product.fromMap(map));
    }
    return products;
  }

  /// returns Product by ID if exist, otherwise returns null
  /// <param name="id">Primary Key Value</param>
  /// <returns>returns Product if exist, otherwise returns null</returns>
  getById(int id, VoidCallback product(Product o)) {
    Product productObj;
    var productFuture = _mnProduct.getById(id);
    productFuture.then((data) {
      if (data.length > 0)
        productObj = Product.fromMap(data[0]);
      else
        productObj = null;
      product(productObj);
    });
  }

  /// <summary>
  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> save() async {
    if (id == null || id == 0)
      id = await _mnProduct.insert(Product.withFields(
          name, description, price, isActive, categoryId, rownum, isDeleted));
    else
      id = await _upsert();
    return id;
  }

  /// <summary>
  /// saveAll method saves the sent List<Product> as a batch in one transaction
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> saveAll(List<Product> products) async {
    var results = _mnProduct.saveAll(
        "INSERT OR REPLACE INTO product (id, name,description,price,isActive,categoryId,rownum,isDeleted)  VALUES (?,?,?,?,?,?,?,?)",
        products);
    return results;
  }

  /// <summary>
  /// Updates if the record exists, otherwise adds a new row
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> _upsert() async {
    id = await _mnProduct.rawInsert(
        "INSERT OR REPLACE INTO product (id, name,description,price,isActive,categoryId,rownum,isDeleted)  VALUES (?,?,?,?,?,?,?,?)",
        [
          id,
          name,
          description,
          price,
          isActive,
          categoryId,
          rownum,
          isDeleted
        ]);
    return id;
  }

  /// <summary>
  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> upsertAll(List<Product> products) async {
    var results = await _mnProduct.rawInsertAll(
        "INSERT OR REPLACE INTO product (id, name,description,price,isActive,categoryId,rownum,isDeleted)  VALUES (?,?,?,?,?,?,?,?)",
        products);
    return results;
  }

  /// <summary>
  /// saveAs Product. Returns a new Primary Key value of Product
  /// </summary>
  /// <returns>Returns a new Primary Key value of Product</returns>
  Future<int> saveAs() async {
    id = await _mnProduct.insert(Product.withFields(
        name, description, price, isActive, categoryId, rownum, isDeleted));
    return id;
  }

  /// <summary>
  /// Deletes Product
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    print("SQFENTITIY: delete Product invoked (id=$id)");
    if (!_softDeleteActivated)
      return _mnProduct.delete(QueryParams(whereString: "id=$id"));
    else
      return _mnProduct
          .updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
  }

  /// <summary>
  /// Recover Product
  /// </summary>
  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered</returns>
  Future<BoolResult> recover() async {
    print("SQFENTITIY: recover Product invoked (id=$id)");
    return _mnProduct
        .updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 0});
  }

  //private ProductFilterBuilder _Select;
  ProductFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    _select = new ProductFilterBuilder(this);
    _select._getIsDeleted = getIsDeleted == true;
    _select.qparams.selectColumns = columnsToSelect;
    return _select;
  }

  ProductFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    ProductFilterBuilder _distinct = new ProductFilterBuilder(this);
    _distinct._getIsDeleted = getIsDeleted == true;
    _distinct.qparams.selectColumns = columnsToSelect;
    _distinct.qparams.distinct = true;
    return _distinct;
  }

  void setDefaultValues() {
    if (price == null) price = 0;
    if (isActive == null) isActive = false;
    if (categoryId == null) categoryId = 0;
    if (rownum == null) rownum = 0;
    if (isDeleted == null) isDeleted = false;
  }
  //end methods
}
// endregion product

// region ProductField
class ProductField extends SearchCriteria {
  DbParameter param;
  String _waitingNot = "";
  ProductFilterBuilder productFB;
  ProductField(ProductFilterBuilder fb) {
    param = new DbParameter();
    productFB = fb;
  }

  ProductField get not {
    _waitingNot = " NOT ";
    return this;
  }

  ProductFilterBuilder equals(var pValue) {
    param.expression = "=";
    productFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, productFB.parameters, param, SqlSyntax.EQuals,
            productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param, SqlSyntax.NotEQuals,
            productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder isNull() {
    productFB._addedBlocks = setCriteria(
        0,
        productFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder contains(dynamic pValue) {
    productFB._addedBlocks = setCriteria(
        "%" + pValue + "%",
        productFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder startsWith(dynamic pValue) {
    productFB._addedBlocks = setCriteria(
        pValue + "%",
        productFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder endsWith(dynamic pValue) {
    productFB._addedBlocks = setCriteria(
        "%" + pValue,
        productFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      productFB._addedBlocks = setCriteria(
          pFirst,
          productFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          productFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "")
        productFB._addedBlocks = setCriteria(pFirst, productFB.parameters,
            param, SqlSyntax.LessThan, productFB._addedBlocks);
      else
        productFB._addedBlocks = setCriteria(pFirst, productFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, productFB._addedBlocks);
    } else if (pLast != null) {
      if (_waitingNot != "")
        productFB._addedBlocks = setCriteria(pLast, productFB.parameters, param,
            SqlSyntax.GreaterThan, productFB._addedBlocks);
      else
        productFB._addedBlocks = setCriteria(pLast, productFB.parameters, param,
            SqlSyntax.LessThanOrEquals, productFB._addedBlocks);
    }
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    productFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.GreaterThan, productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.LessThanOrEquals, productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    productFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, productFB.parameters, param, SqlSyntax.LessThan,
            productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    productFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param, SqlSyntax.LessThan,
            productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    productFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.LessThanOrEquals, productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.GreaterThan, productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder inValues(var pValue) {
    productFB._addedBlocks = setCriteria(
        pValue,
        productFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }
}
// endregion ProductField

// region ProductFilterBuilder
class ProductFilterBuilder extends SearchCriteria {
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Product _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;
  ProductFilterBuilder(Product obj) {
    whereString = "";
    qparams = new QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = new AddedBlocks(new List<bool>(), new List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }

  ProductFilterBuilder get and {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " AND ";
    return this;
  }

  ProductFilterBuilder get or {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " OR ";
    return this;
  }

  ProductFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  ProductFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != "") {
      DbParameter param = new DbParameter();
      _addedBlocks = setCriteria(
          0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  ProductFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  ProductFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  ProductFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += " ) ";
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  ProductFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add(argFields);
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s ");
        }
    }
    return this;
  }

  ProductFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add("$argFields desc ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s desc ");
        }
    }
    return this;
  }

  ProductFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.groupByList.add(" $argFields ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.groupByList.add(" $s ");
        }
    }
    return this;
  }

  ProductField setField(ProductField field, String colName, DbType dbtype) {
    field = new ProductField(this);
    field.param = new DbParameter(
        dbType: dbtype,
        columnName: colName,
        wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
    return field;
  }

  ProductField _id;
  ProductField get id {
    _id = setField(_id, "id", DbType.integer);
    return _id;
  }

  ProductField _name;
  ProductField get name {
    _name = setField(_name, "name", DbType.text);
    return _name;
  }

  ProductField _description;
  ProductField get description {
    _description = setField(_description, "description", DbType.text);
    return _description;
  }

  ProductField _price;
  ProductField get price {
    _price = setField(_price, "price", DbType.real);
    return _price;
  }

  ProductField _isActive;
  ProductField get isActive {
    _isActive = setField(_isActive, "isActive", DbType.bool);
    return _isActive;
  }

  ProductField _categoryId;
  ProductField get categoryId {
    _categoryId = setField(_categoryId, "categoryId", DbType.integer);
    return _categoryId;
  }

  ProductField _rownum;
  ProductField get rownum {
    _rownum = setField(_rownum, "rownum", DbType.integer);
    return _rownum;
  }

  ProductField _isDeleted;
  ProductField get isDeleted {
    _isDeleted = setField(_isDeleted, "isDeleted", DbType.bool);
    return _isDeleted;
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams.limit = _pagesize;
      qparams.offset = (_page - 1) * _pagesize;
    } else {
      qparams.limit = _pagesize;
      qparams.offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll("[", "")
              .replaceAll("]", "")
              .toString();
          whereString += param.whereString
              .replaceAll("{field}", param.columnName)
              .replaceAll("?", param.value);
          param.value = null;
        } else
          whereString +=
              param.whereString.replaceAll("{field}", param.columnName);
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) param.value = param.value ? 1 : 0;
            break;
          default:
        }

        if (param.value != null) whereArguments.add(param.value);
        if (param.value2 != null) whereArguments.add(param.value2);
      } else
        whereString += param.whereString;
    }
    if (Product._softDeleteActivated) {
      if (whereString != "")
        whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") +
            " ($whereString)";
      else if (!_getIsDeleted) whereString = "ifnull(isDeleted,0)=0";
    }

    if (whereString != "") qparams.whereString = whereString;
    qparams.whereArguments = whereArguments;
    qparams.groupBy = groupByList.join(',');
    qparams.orderBy = orderByList.join(',');
  }

  /// <summary>
  /// Deletes List<Product> batch by query
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    _buildParameters();
    var r = BoolResult();
    if (Product._softDeleteActivated)
      r = await _obj._mnProduct.updateBatch(qparams, {"isDeleted": 1});
    else
      r = await _obj._mnProduct.delete(qparams);
    return r;
  }

  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print("SQFENTITIY: recover Product batch invoked");
    return _obj._mnProduct.updateBatch(qparams, {"isDeleted": 0});
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnProduct.updateBatch(qparams, values);
  }

  /// This method always returns ProductObj if exist, otherwise returns null
  /// <returns>List<Product></returns>
  void toSingle(VoidCallback product(Product o)) {
    _pagesize = 1;
    _buildParameters();
    var objFuture = _obj._mnProduct.toList(qparams);
    objFuture.then((data) {
      if (data.length > 0)
        product(Product.fromMap(data[0]));
      else
        product(null);
    });
  }

  /// This method always returns int.
  /// <returns>int</returns>
  Future<BoolResult> toCount(VoidCallback productCount(int c)) async {
    _buildParameters();
    qparams.selectColumns = ["COUNT(1) AS CNT"];
    var productsFuture = await _obj._mnProduct.toList(qparams);
    int count = productsFuture[0]["CNT"];
    productCount(count);
    return BoolResult(
        success: count > 0,
        successMessage: count > 0 ? "toCount(): $count items found" : "",
        errorMessage: count > 0 ? "" : "toCount(): no items found");
  }

  /// This method always returns List<Product>.
  /// <returns>List<Product></returns>
  void toList(VoidCallback productList(List<Product> o)) async {
    _buildParameters();

    var productsFuture = _obj._mnProduct.toList(qparams);

    List<Product> productsData = new List<Product>();
    productsFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        productsData.add(Product.fromMap(data[i]));
      }
      productList(productsData);
      productsData = null;
    });
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int></returns>
  Future<List<int>> toListPrimaryKey(VoidCallback idList(List<int> o),
      [bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    List<int> idData = new List<int>();
    qparams.selectColumns = ["id"];
    var idFuture = await _obj._mnProduct.toList(qparams);

    int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]["id"]);
    }
    idList(idData);
    return idData;
  }

  void toListObject(VoidCallback listObject(List<dynamic> o)) async {
    _buildParameters();

    var objectFuture = _obj._mnProduct.toList(qparams);

    List<dynamic> objectsData = new List<dynamic>();
    objectFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        objectsData.add(data[i]);
      }
      listObject(objectsData);
      objectsData = null;
    });
  }
}
// endregion ProductFilterBuilder

// region ProductFields
class ProductFields {
  static TableField _fId;
  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }

  static TableField _fName;
  static TableField get name {
    _fName = SqlSyntax.setField(_fName, "name", DbType.text);
    return _fName;
  }

  static TableField _fDescription;
  static TableField get description {
    _fDescription =
        SqlSyntax.setField(_fDescription, "description", DbType.text);
    return _fDescription;
  }

  static TableField _fPrice;
  static TableField get price {
    _fPrice = SqlSyntax.setField(_fPrice, "price", DbType.real);
    return _fPrice;
  }

  static TableField _fIsActive;
  static TableField get isActive {
    _fIsActive = SqlSyntax.setField(_fIsActive, "isActive", DbType.bool);
    return _fIsActive;
  }

  static TableField _fCategoryId;
  static TableField get categoryId {
    _fCategoryId =
        SqlSyntax.setField(_fCategoryId, "categoryId", DbType.integer);
    return _fCategoryId;
  }

  static TableField _fRownum;
  static TableField get rownum {
    _fRownum = SqlSyntax.setField(_fRownum, "rownum", DbType.integer);
    return _fRownum;
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    _fIsDeleted = SqlSyntax.setField(_fIsDeleted, "isDeleted", DbType.integer);
    return _fIsDeleted;
  }
}
// endregion ProductFields

//region ProductManager
class ProductManager extends SqfEntityProvider {
  static String _tableName = "product";
  static String _colId = "id";

  ProductManager() : super(MyDbModel(), tableName: _tableName, colId: _colId);
}
//endregion ProductManager

/*
      These classes was generated by SqfEntity
      To use these SqfEntity classes do following: 
      - import Category.dart into where to use
      - start typing Category().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
      - and then just put end of filters / or end of only select()  toSingle(category) / or toList(categoryList) 
      - you can select one Category or List<Category> by your filters and orders
      - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
        Enjoy.. Huseyin Tokpunar
      */
// region Category
class Category extends SearchCriteria {
  // FIELDS
  int id;
  String name;
  bool isActive;
  bool isDeleted;
  // end FIELDS

// COLLECTIONS
  getProducts(VoidCallback productList(List<Product> o)) {
    Product().select().categoryId.equals(id).toList((objList) {
      productList(objList);
    });
  }
  // END COLLECTIONS

  static const bool _softDeleteActivated = true;
  CategoryManager __mnCategory;
  CategoryFilterBuilder _select;

  CategoryManager get _mnCategory {
    if (__mnCategory == null) __mnCategory = new CategoryManager();
    return __mnCategory;
  }

  Category({this.id, this.name, this.isActive, this.isDeleted}) {
    setDefaultValues();
  }
  Category.withFields(this.name, this.isActive, this.isDeleted) {
    setDefaultValues();
  }
  Category.withId(this.id, this.name, this.isActive, this.isDeleted) {
    setDefaultValues();
  }

  // methods
  Map<String, dynamic> toMap({bool forQuery = false}) {
    var map = Map<String, dynamic>();
    if (id != null) map["id"] = id;
    if (name != null) map["name"] = name;
    if (isActive != null)
      map["isActive"] = forQuery ? (isActive ? 1 : 0) : isActive;
    if (isDeleted != null)
      map["isDeleted"] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;

    return map;
  }

  Category.fromMap(Map<String, dynamic> o) {
    this.id = o["id"];
    this.name = o["name"];
    this.isActive = o["isActive"] != null ? o["isActive"] == 1 : null;
    this.isDeleted = o["isDeleted"] != null ? o["isDeleted"] == 1 : null;
  }

  List<dynamic> toArgs() {
    return [id, name, isActive, isDeleted];
  }

  static fromWebUrl(
      String url, VoidCallback categoryList(List<Category> o)) async {
    var objList = List<Category>();
    http.get(url).then((response) {
      Iterable list = json.decode(response.body);
      try {
        objList = list.map((category) => Category.fromMap(category)).toList();
        categoryList(objList);
      } catch (e) {
        print("SQFENTITY ERROR Category.fromWeb: ErrorMessage:" + e.toString());
      }
    });
  }

  static Future<List<Category>> fromObjectList(Future<List<dynamic>> o) async {
    var categorysList = new List<Category>();
    o.then((data) {
      for (int i = 0; i < data.length; i++) {
        categorysList.add(Category.fromMap(data[i]));
      }
    });
    return categorysList;
  }

  static List<Category> fromMapList(List<Map<String, dynamic>> query) {
    List<Category> categorys = List<Category>();
    for (Map map in query) {
      categorys.add(Category.fromMap(map));
    }
    return categorys;
  }

  /// returns Category by ID if exist, otherwise returns null
  /// <param name="id">Primary Key Value</param>
  /// <returns>returns Category if exist, otherwise returns null</returns>
  getById(int id, VoidCallback category(Category o)) {
    Category categoryObj;
    var categoryFuture = _mnCategory.getById(id);
    categoryFuture.then((data) {
      if (data.length > 0)
        categoryObj = Category.fromMap(data[0]);
      else
        categoryObj = null;
      category(categoryObj);
    });
  }

  /// <summary>
  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> save() async {
    if (id == null || id == 0)
      id = await _mnCategory
          .insert(Category.withFields(name, isActive, isDeleted));
    else
      id = await _upsert();
    return id;
  }

  /// <summary>
  /// saveAll method saves the sent List<Category> as a batch in one transaction
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> saveAll(List<Category> categories) async {
    var results = _mnCategory.saveAll(
        "INSERT OR REPLACE INTO category (id, name,isActive,isDeleted)  VALUES (?,?,?,?)",
        categories);
    return results;
  }

  /// <summary>
  /// Updates if the record exists, otherwise adds a new row
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> _upsert() async {
    id = await _mnCategory.rawInsert(
        "INSERT OR REPLACE INTO category (id, name,isActive,isDeleted)  VALUES (?,?,?,?)",
        [id, name, isActive, isDeleted]);
    return id;
  }

  /// <summary>
  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> upsertAll(List<Category> categories) async {
    var results = await _mnCategory.rawInsertAll(
        "INSERT OR REPLACE INTO category (id, name,isActive,isDeleted)  VALUES (?,?,?,?)",
        categories);
    return results;
  }

  /// <summary>
  /// saveAs Category. Returns a new Primary Key value of Category
  /// </summary>
  /// <returns>Returns a new Primary Key value of Category</returns>
  Future<int> saveAs() async {
    id = await _mnCategory
        .insert(Category.withFields(name, isActive, isDeleted));
    return id;
  }

  /// <summary>
  /// Deletes Category
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    print("SQFENTITIY: delete Category invoked (id=$id)");
    var result = BoolResult();
    result = await Product().select().categoryId.equals(id).toCount((_) {});
    if (result.success)
      return BoolResult(
          success: false,
          errorMessage:
              "SQFENTITY ERROR: The DELETE statement conflicted with the REFERENCE RELATIONSHIP 'Product.categoryId'");
    else if (!_softDeleteActivated)
      return _mnCategory.delete(QueryParams(whereString: "id=$id"));
    else
      return _mnCategory
          .updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
  }

  /// <summary>
  /// Recover Product
  /// </summary>
  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered</returns>
  Future<BoolResult> recover() async {
    print("SQFENTITIY: recover Category invoked (id=$id)");
    return _mnCategory
        .updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 0});
  }

  //private CategoryFilterBuilder _Select;
  CategoryFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    _select = new CategoryFilterBuilder(this);
    _select._getIsDeleted = getIsDeleted == true;
    _select.qparams.selectColumns = columnsToSelect;
    return _select;
  }

  CategoryFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    CategoryFilterBuilder _distinct = new CategoryFilterBuilder(this);
    _distinct._getIsDeleted = getIsDeleted == true;
    _distinct.qparams.selectColumns = columnsToSelect;
    _distinct.qparams.distinct = true;
    return _distinct;
  }

  void setDefaultValues() {
    if (isActive == null) isActive = false;
    if (isDeleted == null) isDeleted = false;
  }
  //end methods
}
// endregion category

// region CategoryField
class CategoryField extends SearchCriteria {
  DbParameter param;
  String _waitingNot = "";
  CategoryFilterBuilder categoryFB;
  CategoryField(CategoryFilterBuilder fb) {
    param = new DbParameter();
    categoryFB = fb;
  }

  CategoryField get not {
    _waitingNot = " NOT ";
    return this;
  }

  CategoryFilterBuilder equals(var pValue) {
    param.expression = "=";
    categoryFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, categoryFB.parameters, param, SqlSyntax.EQuals,
            categoryFB._addedBlocks)
        : setCriteria(pValue, categoryFB.parameters, param, SqlSyntax.NotEQuals,
            categoryFB._addedBlocks);
    _waitingNot = "";
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder isNull() {
    categoryFB._addedBlocks = setCriteria(
        0,
        categoryFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        categoryFB._addedBlocks);
    _waitingNot = "";
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder contains(dynamic pValue) {
    categoryFB._addedBlocks = setCriteria(
        "%" + pValue + "%",
        categoryFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        categoryFB._addedBlocks);
    _waitingNot = "";
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder startsWith(dynamic pValue) {
    categoryFB._addedBlocks = setCriteria(
        pValue + "%",
        categoryFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        categoryFB._addedBlocks);
    _waitingNot = "";
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder endsWith(dynamic pValue) {
    categoryFB._addedBlocks = setCriteria(
        "%" + pValue,
        categoryFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        categoryFB._addedBlocks);
    _waitingNot = "";
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      categoryFB._addedBlocks = setCriteria(
          pFirst,
          categoryFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          categoryFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "")
        categoryFB._addedBlocks = setCriteria(pFirst, categoryFB.parameters,
            param, SqlSyntax.LessThan, categoryFB._addedBlocks);
      else
        categoryFB._addedBlocks = setCriteria(pFirst, categoryFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, categoryFB._addedBlocks);
    } else if (pLast != null) {
      if (_waitingNot != "")
        categoryFB._addedBlocks = setCriteria(pLast, categoryFB.parameters,
            param, SqlSyntax.GreaterThan, categoryFB._addedBlocks);
      else
        categoryFB._addedBlocks = setCriteria(pLast, categoryFB.parameters,
            param, SqlSyntax.LessThanOrEquals, categoryFB._addedBlocks);
    }
    _waitingNot = "";
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    categoryFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.GreaterThan, categoryFB._addedBlocks)
        : setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.LessThanOrEquals, categoryFB._addedBlocks);
    _waitingNot = "";
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    categoryFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, categoryFB.parameters, param, SqlSyntax.LessThan,
            categoryFB._addedBlocks)
        : setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, categoryFB._addedBlocks);
    _waitingNot = "";
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    categoryFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, categoryFB._addedBlocks)
        : setCriteria(pValue, categoryFB.parameters, param, SqlSyntax.LessThan,
            categoryFB._addedBlocks);
    _waitingNot = "";
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    categoryFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.LessThanOrEquals, categoryFB._addedBlocks)
        : setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.GreaterThan, categoryFB._addedBlocks);
    _waitingNot = "";
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder inValues(var pValue) {
    categoryFB._addedBlocks = setCriteria(
        pValue,
        categoryFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        categoryFB._addedBlocks);
    _waitingNot = "";
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }
}
// endregion CategoryField

// region CategoryFilterBuilder
class CategoryFilterBuilder extends SearchCriteria {
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Category _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;
  CategoryFilterBuilder(Category obj) {
    whereString = "";
    qparams = new QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = new AddedBlocks(new List<bool>(), new List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }

  CategoryFilterBuilder get and {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " AND ";
    return this;
  }

  CategoryFilterBuilder get or {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " OR ";
    return this;
  }

  CategoryFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  CategoryFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != "") {
      DbParameter param = new DbParameter();
      _addedBlocks = setCriteria(
          0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  CategoryFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  CategoryFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  CategoryFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += " ) ";
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  CategoryFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add(argFields);
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s ");
        }
    }
    return this;
  }

  CategoryFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add("$argFields desc ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s desc ");
        }
    }
    return this;
  }

  CategoryFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.groupByList.add(" $argFields ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.groupByList.add(" $s ");
        }
    }
    return this;
  }

  CategoryField setField(CategoryField field, String colName, DbType dbtype) {
    field = new CategoryField(this);
    field.param = new DbParameter(
        dbType: dbtype,
        columnName: colName,
        wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
    return field;
  }

  CategoryField _id;
  CategoryField get id {
    _id = setField(_id, "id", DbType.integer);
    return _id;
  }

  CategoryField _name;
  CategoryField get name {
    _name = setField(_name, "name", DbType.text);
    return _name;
  }

  CategoryField _isActive;
  CategoryField get isActive {
    _isActive = setField(_isActive, "isActive", DbType.bool);
    return _isActive;
  }

  CategoryField _isDeleted;
  CategoryField get isDeleted {
    _isDeleted = setField(_isDeleted, "isDeleted", DbType.bool);
    return _isDeleted;
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams.limit = _pagesize;
      qparams.offset = (_page - 1) * _pagesize;
    } else {
      qparams.limit = _pagesize;
      qparams.offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll("[", "")
              .replaceAll("]", "")
              .toString();
          whereString += param.whereString
              .replaceAll("{field}", param.columnName)
              .replaceAll("?", param.value);
          param.value = null;
        } else
          whereString +=
              param.whereString.replaceAll("{field}", param.columnName);
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) param.value = param.value ? 1 : 0;
            break;
          default:
        }

        if (param.value != null) whereArguments.add(param.value);
        if (param.value2 != null) whereArguments.add(param.value2);
      } else
        whereString += param.whereString;
    }
    if (Category._softDeleteActivated) {
      if (whereString != "")
        whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") +
            " ($whereString)";
      else if (!_getIsDeleted) whereString = "ifnull(isDeleted,0)=0";
    }

    if (whereString != "") qparams.whereString = whereString;
    qparams.whereArguments = whereArguments;
    qparams.groupBy = groupByList.join(',');
    qparams.orderBy = orderByList.join(',');
  }

  /// <summary>
  /// Deletes List<Category> batch by query
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    _buildParameters();
    var r = BoolResult();
    var idList = await toListPrimaryKey((_) {}, false);
    r = await Product().select().categoryId.inValues(idList).toCount((_) {});
    if (r.success) {
      return BoolResult(
          success: false,
          errorMessage:
              "SQFENTITY ERROR: The DELETE statement conflicted with the REFERENCE RELATIONSHIP 'Product.categoryId'");
    } else if (Category._softDeleteActivated)
      r = await _obj._mnCategory.updateBatch(qparams, {"isDeleted": 1});
    else
      r = await _obj._mnCategory.delete(qparams);
    return r;
  }

  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print("SQFENTITIY: recover Category batch invoked");
    return _obj._mnCategory.updateBatch(qparams, {"isDeleted": 0});
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnCategory.updateBatch(qparams, values);
  }

  /// This method always returns CategoryObj if exist, otherwise returns null
  /// <returns>List<Category></returns>
  void toSingle(VoidCallback category(Category o)) {
    _pagesize = 1;
    _buildParameters();
    var objFuture = _obj._mnCategory.toList(qparams);
    objFuture.then((data) {
      if (data.length > 0)
        category(Category.fromMap(data[0]));
      else
        category(null);
    });
  }

  /// This method always returns int.
  /// <returns>int</returns>
  Future<BoolResult> toCount(VoidCallback categoryCount(int c)) async {
    _buildParameters();
    qparams.selectColumns = ["COUNT(1) AS CNT"];
    var categoriesFuture = await _obj._mnCategory.toList(qparams);
    int count = categoriesFuture[0]["CNT"];
    categoryCount(count);
    return BoolResult(
        success: count > 0,
        successMessage: count > 0 ? "toCount(): $count items found" : "",
        errorMessage: count > 0 ? "" : "toCount(): no items found");
  }

  /// This method always returns List<Category>.
  /// <returns>List<Category></returns>
  void toList(VoidCallback categoryList(List<Category> o)) async {
    _buildParameters();

    var categoriesFuture = _obj._mnCategory.toList(qparams);

    List<Category> categoriesData = new List<Category>();
    categoriesFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        categoriesData.add(Category.fromMap(data[i]));
      }
      categoryList(categoriesData);
      categoriesData = null;
    });
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int></returns>
  Future<List<int>> toListPrimaryKey(VoidCallback idList(List<int> o),
      [bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    List<int> idData = new List<int>();
    qparams.selectColumns = ["id"];
    var idFuture = await _obj._mnCategory.toList(qparams);

    int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]["id"]);
    }
    idList(idData);
    return idData;
  }

  void toListObject(VoidCallback listObject(List<dynamic> o)) async {
    _buildParameters();

    var objectFuture = _obj._mnCategory.toList(qparams);

    List<dynamic> objectsData = new List<dynamic>();
    objectFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        objectsData.add(data[i]);
      }
      listObject(objectsData);
      objectsData = null;
    });
  }
}
// endregion CategoryFilterBuilder

// region CategoryFields
class CategoryFields {
  static TableField _fId;
  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }

  static TableField _fName;
  static TableField get name {
    _fName = SqlSyntax.setField(_fName, "name", DbType.text);
    return _fName;
  }

  static TableField _fIsActive;
  static TableField get isActive {
    _fIsActive = SqlSyntax.setField(_fIsActive, "isActive", DbType.bool);
    return _fIsActive;
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    _fIsDeleted = SqlSyntax.setField(_fIsDeleted, "isDeleted", DbType.integer);
    return _fIsDeleted;
  }
}
// endregion CategoryFields

//region CategoryManager
class CategoryManager extends SqfEntityProvider {
  static String _tableName = "category";
  static String _colId = "id";

  CategoryManager() : super(MyDbModel(), tableName: _tableName, colId: _colId);
}
//endregion CategoryManager

/*
      These classes was generated by SqfEntity
      To use these SqfEntity classes do following: 
      - import Todo.dart into where to use
      - start typing Todo().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
      - and then just put end of filters / or end of only select()  toSingle(todo) / or toList(todoList) 
      - you can select one Todo or List<Todo> by your filters and orders
      - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
        Enjoy.. Huseyin Tokpunar
      */
// region Todo
class Todo extends SearchCriteria {
  // FIELDS
  int id;
  int userId;
  String title;
  bool completed;
  // end FIELDS

  static const bool _softDeleteActivated = false;
  TodoManager __mnTodo;
  TodoFilterBuilder _select;

  TodoManager get _mnTodo {
    if (__mnTodo == null) __mnTodo = new TodoManager();
    return __mnTodo;
  }

  Todo({this.id, this.userId, this.title, this.completed}) {
    setDefaultValues();
  }
  Todo.withFields(this.userId, this.title, this.completed) {
    setDefaultValues();
  }
  Todo.withId(this.id, this.userId, this.title, this.completed) {
    setDefaultValues();
  }

  // methods
  Map<String, dynamic> toMap({bool forQuery = false}) {
    var map = Map<String, dynamic>();
    if (id != null) map["id"] = id;
    if (userId != null) map["userId"] = userId;
    if (title != null) map["title"] = title;
    if (completed != null)
      map["completed"] = forQuery ? (completed ? 1 : 0) : completed;

    return map;
  }

  Todo.fromMap(Map<String, dynamic> o) {
    this.id = o["id"];
    this.userId = o["userId"];
    this.title = o["title"];
    this.completed = o["completed"] != null ? o["completed"] == 1 : null;
  }

  List<dynamic> toArgs() {
    return [id, userId, title, completed];
  }

  static fromWeb(VoidCallback todoList(List<Todo> o)) async {
    fromWebUrl("https://jsonplaceholder.typicode.com/todos", (objList) {
      todoList(objList);
    });
  }

  static fromWebUrl(String url, VoidCallback todoList(List<Todo> o)) async {
    var objList = List<Todo>();
    http.get(url).then((response) {
      Iterable list = json.decode(response.body);
      try {
        objList = list.map((todo) => Todo.fromMap(todo)).toList();
        todoList(objList);
      } catch (e) {
        print("SQFENTITY ERROR Todo.fromWeb: ErrorMessage:" + e.toString());
      }
    });
  }

  static Future<List<Todo>> fromObjectList(Future<List<dynamic>> o) async {
    var todosList = new List<Todo>();
    o.then((data) {
      for (int i = 0; i < data.length; i++) {
        todosList.add(Todo.fromMap(data[i]));
      }
    });
    return todosList;
  }

  static List<Todo> fromMapList(List<Map<String, dynamic>> query) {
    List<Todo> todos = List<Todo>();
    for (Map map in query) {
      todos.add(Todo.fromMap(map));
    }
    return todos;
  }

  /// returns Todo by ID if exist, otherwise returns null
  /// <param name="id">Primary Key Value</param>
  /// <returns>returns Todo if exist, otherwise returns null</returns>
  getById(int id, VoidCallback todo(Todo o)) {
    Todo todoObj;
    var todoFuture = _mnTodo.getById(id);
    todoFuture.then((data) {
      if (data.length > 0)
        todoObj = Todo.fromMap(data[0]);
      else
        todoObj = null;
      todo(todoObj);
    });
  }

  /// <summary>
  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> save() async {
    if (id == null || id == 0)
      id = await _mnTodo.insert(Todo.withFields(userId, title, completed));
    else
      id = await _upsert();
    return id;
  }

  /// <summary>
  /// saveAll method saves the sent List<Todo> as a batch in one transaction
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> saveAll(List<Todo> todos) async {
    var results = _mnTodo.saveAll(
        "INSERT OR REPLACE INTO todos (id, userId,title,completed)  VALUES (?,?,?,?)",
        todos);
    return results;
  }

  /// <summary>
  /// Updates if the record exists, otherwise adds a new row
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> _upsert() async {
    id = await _mnTodo.rawInsert(
        "INSERT OR REPLACE INTO todos (id, userId,title,completed)  VALUES (?,?,?,?)",
        [id, userId, title, completed]);
    return id;
  }

  /// <summary>
  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> upsertAll(List<Todo> todos) async {
    var results = await _mnTodo.rawInsertAll(
        "INSERT OR REPLACE INTO todos (id, userId,title,completed)  VALUES (?,?,?,?)",
        todos);
    return results;
  }

  /// <summary>
  /// saveAs Todo. Returns a new Primary Key value of Todo
  /// </summary>
  /// <returns>Returns a new Primary Key value of Todo</returns>
  Future<int> saveAs() async {
    id = await _mnTodo.insert(Todo.withFields(userId, title, completed));
    return id;
  }

  /// <summary>
  /// Deletes Todo
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    print("SQFENTITIY: delete Todo invoked (id=$id)");
    if (!_softDeleteActivated)
      return _mnTodo.delete(QueryParams(whereString: "id=$id"));
    else
      return _mnTodo
          .updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
  }

  //private TodoFilterBuilder _Select;
  TodoFilterBuilder select({List<String> columnsToSelect, bool getIsDeleted}) {
    _select = new TodoFilterBuilder(this);
    _select._getIsDeleted = getIsDeleted == true;
    _select.qparams.selectColumns = columnsToSelect;
    return _select;
  }

  TodoFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    TodoFilterBuilder _distinct = new TodoFilterBuilder(this);
    _distinct._getIsDeleted = getIsDeleted == true;
    _distinct.qparams.selectColumns = columnsToSelect;
    _distinct.qparams.distinct = true;
    return _distinct;
  }

  void setDefaultValues() {
    if (completed == null) completed = false;
  }
  //end methods
}
// endregion todo

// region TodoField
class TodoField extends SearchCriteria {
  DbParameter param;
  String _waitingNot = "";
  TodoFilterBuilder todoFB;
  TodoField(TodoFilterBuilder fb) {
    param = new DbParameter();
    todoFB = fb;
  }

  TodoField get not {
    _waitingNot = " NOT ";
    return this;
  }

  TodoFilterBuilder equals(var pValue) {
    param.expression = "=";
    todoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, todoFB.parameters, param, SqlSyntax.EQuals,
            todoFB._addedBlocks)
        : setCriteria(pValue, todoFB.parameters, param, SqlSyntax.NotEQuals,
            todoFB._addedBlocks);
    _waitingNot = "";
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder isNull() {
    todoFB._addedBlocks = setCriteria(
        0,
        todoFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        todoFB._addedBlocks);
    _waitingNot = "";
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder contains(dynamic pValue) {
    todoFB._addedBlocks = setCriteria(
        "%" + pValue + "%",
        todoFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        todoFB._addedBlocks);
    _waitingNot = "";
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder startsWith(dynamic pValue) {
    todoFB._addedBlocks = setCriteria(
        pValue + "%",
        todoFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        todoFB._addedBlocks);
    _waitingNot = "";
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder endsWith(dynamic pValue) {
    todoFB._addedBlocks = setCriteria(
        "%" + pValue,
        todoFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        todoFB._addedBlocks);
    _waitingNot = "";
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      todoFB._addedBlocks = setCriteria(
          pFirst,
          todoFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          todoFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "")
        todoFB._addedBlocks = setCriteria(pFirst, todoFB.parameters, param,
            SqlSyntax.LessThan, todoFB._addedBlocks);
      else
        todoFB._addedBlocks = setCriteria(pFirst, todoFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, todoFB._addedBlocks);
    } else if (pLast != null) {
      if (_waitingNot != "")
        todoFB._addedBlocks = setCriteria(pLast, todoFB.parameters, param,
            SqlSyntax.GreaterThan, todoFB._addedBlocks);
      else
        todoFB._addedBlocks = setCriteria(pLast, todoFB.parameters, param,
            SqlSyntax.LessThanOrEquals, todoFB._addedBlocks);
    }
    _waitingNot = "";
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    todoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, todoFB.parameters, param, SqlSyntax.GreaterThan,
            todoFB._addedBlocks)
        : setCriteria(pValue, todoFB.parameters, param,
            SqlSyntax.LessThanOrEquals, todoFB._addedBlocks);
    _waitingNot = "";
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    todoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, todoFB.parameters, param, SqlSyntax.LessThan,
            todoFB._addedBlocks)
        : setCriteria(pValue, todoFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, todoFB._addedBlocks);
    _waitingNot = "";
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    todoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, todoFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, todoFB._addedBlocks)
        : setCriteria(pValue, todoFB.parameters, param, SqlSyntax.LessThan,
            todoFB._addedBlocks);
    _waitingNot = "";
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    todoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, todoFB.parameters, param,
            SqlSyntax.LessThanOrEquals, todoFB._addedBlocks)
        : setCriteria(pValue, todoFB.parameters, param, SqlSyntax.GreaterThan,
            todoFB._addedBlocks);
    _waitingNot = "";
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder inValues(var pValue) {
    todoFB._addedBlocks = setCriteria(
        pValue,
        todoFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        todoFB._addedBlocks);
    _waitingNot = "";
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }
}
// endregion TodoField

// region TodoFilterBuilder
class TodoFilterBuilder extends SearchCriteria {
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Todo _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;
  TodoFilterBuilder(Todo obj) {
    whereString = "";
    qparams = new QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = new AddedBlocks(new List<bool>(), new List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }

  TodoFilterBuilder get and {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " AND ";
    return this;
  }

  TodoFilterBuilder get or {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " OR ";
    return this;
  }

  TodoFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  TodoFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != "") {
      DbParameter param = new DbParameter();
      _addedBlocks = setCriteria(
          0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  TodoFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  TodoFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  TodoFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += " ) ";
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  TodoFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add(argFields);
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s ");
        }
    }
    return this;
  }

  TodoFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add("$argFields desc ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s desc ");
        }
    }
    return this;
  }

  TodoFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.groupByList.add(" $argFields ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.groupByList.add(" $s ");
        }
    }
    return this;
  }

  TodoField setField(TodoField field, String colName, DbType dbtype) {
    field = new TodoField(this);
    field.param = new DbParameter(
        dbType: dbtype,
        columnName: colName,
        wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
    return field;
  }

  TodoField _id;
  TodoField get id {
    _id = setField(_id, "id", DbType.integer);
    return _id;
  }

  TodoField _userId;
  TodoField get userId {
    _userId = setField(_userId, "userId", DbType.integer);
    return _userId;
  }

  TodoField _title;
  TodoField get title {
    _title = setField(_title, "title", DbType.text);
    return _title;
  }

  TodoField _completed;
  TodoField get completed {
    _completed = setField(_completed, "completed", DbType.bool);
    return _completed;
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams.limit = _pagesize;
      qparams.offset = (_page - 1) * _pagesize;
    } else {
      qparams.limit = _pagesize;
      qparams.offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll("[", "")
              .replaceAll("]", "")
              .toString();
          whereString += param.whereString
              .replaceAll("{field}", param.columnName)
              .replaceAll("?", param.value);
          param.value = null;
        } else
          whereString +=
              param.whereString.replaceAll("{field}", param.columnName);
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) param.value = param.value ? 1 : 0;
            break;
          default:
        }

        if (param.value != null) whereArguments.add(param.value);
        if (param.value2 != null) whereArguments.add(param.value2);
      } else
        whereString += param.whereString;
    }
    if (Todo._softDeleteActivated) {
      if (whereString != "")
        whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") +
            " ($whereString)";
      else if (!_getIsDeleted) whereString = "ifnull(isDeleted,0)=0";
    }

    if (whereString != "") qparams.whereString = whereString;
    qparams.whereArguments = whereArguments;
    qparams.groupBy = groupByList.join(',');
    qparams.orderBy = orderByList.join(',');
  }

  /// <summary>
  /// Deletes List<Todo> batch by query
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    _buildParameters();
    var r = BoolResult();
    if (Todo._softDeleteActivated)
      r = await _obj._mnTodo.updateBatch(qparams, {"isDeleted": 1});
    else
      r = await _obj._mnTodo.delete(qparams);
    return r;
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnTodo.updateBatch(qparams, values);
  }

  /// This method always returns TodoObj if exist, otherwise returns null
  /// <returns>List<Todo></returns>
  void toSingle(VoidCallback todo(Todo o)) {
    _pagesize = 1;
    _buildParameters();
    var objFuture = _obj._mnTodo.toList(qparams);
    objFuture.then((data) {
      if (data.length > 0)
        todo(Todo.fromMap(data[0]));
      else
        todo(null);
    });
  }

  /// This method always returns int.
  /// <returns>int</returns>
  Future<BoolResult> toCount(VoidCallback todoCount(int c)) async {
    _buildParameters();
    qparams.selectColumns = ["COUNT(1) AS CNT"];
    var todosFuture = await _obj._mnTodo.toList(qparams);
    int count = todosFuture[0]["CNT"];
    todoCount(count);
    return BoolResult(
        success: count > 0,
        successMessage: count > 0 ? "toCount(): $count items found" : "",
        errorMessage: count > 0 ? "" : "toCount(): no items found");
  }

  /// This method always returns List<Todo>.
  /// <returns>List<Todo></returns>
  void toList(VoidCallback todoList(List<Todo> o)) async {
    _buildParameters();

    var todosFuture = _obj._mnTodo.toList(qparams);

    List<Todo> todosData = new List<Todo>();
    todosFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        todosData.add(Todo.fromMap(data[i]));
      }
      todoList(todosData);
      todosData = null;
    });
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int></returns>
  Future<List<int>> toListPrimaryKey(VoidCallback idList(List<int> o),
      [bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    List<int> idData = new List<int>();
    qparams.selectColumns = ["id"];
    var idFuture = await _obj._mnTodo.toList(qparams);

    int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]["id"]);
    }
    idList(idData);
    return idData;
  }

  void toListObject(VoidCallback listObject(List<dynamic> o)) async {
    _buildParameters();

    var objectFuture = _obj._mnTodo.toList(qparams);

    List<dynamic> objectsData = new List<dynamic>();
    objectFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        objectsData.add(data[i]);
      }
      listObject(objectsData);
      objectsData = null;
    });
  }
}
// endregion TodoFilterBuilder

// region TodoFields
class TodoFields {
  static TableField _fId;
  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }

  static TableField _fUserId;
  static TableField get userId {
    _fUserId = SqlSyntax.setField(_fUserId, "userId", DbType.integer);
    return _fUserId;
  }

  static TableField _fTitle;
  static TableField get title {
    _fTitle = SqlSyntax.setField(_fTitle, "title", DbType.text);
    return _fTitle;
  }

  static TableField _fCompleted;
  static TableField get completed {
    _fCompleted = SqlSyntax.setField(_fCompleted, "completed", DbType.bool);
    return _fCompleted;
  }
}
// endregion TodoFields

//region TodoManager
class TodoManager extends SqfEntityProvider {
  static String _tableName = "todos";
  static String _colId = "id";

  TodoManager() : super(MyDbModel(), tableName: _tableName, colId: _colId);
}
//endregion TodoManager
